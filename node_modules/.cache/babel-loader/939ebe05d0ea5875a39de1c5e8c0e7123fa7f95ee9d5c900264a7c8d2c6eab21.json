{"ast":null,"code":"import _toConsumableArray from \"C:/Users/V/mySite/BackendDevelopment/ReactLearning/kepperAppPart3AllINOne/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/V/mySite/BackendDevelopment/ReactLearning/kepperAppPart3AllINOne/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\V\\\\mySite\\\\BackendDevelopment\\\\ReactLearning\\\\kepperAppPart3AllINOne\\\\src\\\\components\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _this = this;\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    notes = _React$useState2[0],\n    setNotes = _React$useState2[1];\n  function noteAdd(newNote) {\n    //all the inputs are come here now we need to store it somewhere like an array that changes the State so we need here useState()...\n    //console.log(note);\n\n    setNotes(function (prevValue) {\n      return [].concat(_toConsumableArray(prevValue), [newNote]);\n    });\n  }\n  function itemDelete(id) {\n    setNotes(function (prevnotes, index) {\n      return prevnotes.filter(function (items, index) {\n        return index !== id;\n      });\n    });\n    //console.log(\"the delete press detected\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateArea, {\n      add: noteAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), notes.map(function (noteItems, index) {\n      //and in the map function we can pass the index so that it can check the index //every noteitems in notes like title and contents pass over that \n      return /*#__PURE__*/_jsxDEV(Note, {\n        id: index,\n        title: noteItems.title,\n        content: noteItems.content,\n        deleteById: itemDelete\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 18\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3oN6erhTmp9YINipb4g2o1mZBuE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Header","Footer","Note","CreateArea","App","useState","notes","setNotes","noteAdd","newNote","prevValue","itemDelete","id","prevnotes","index","filter","items","map","noteItems","title","content"],"sources":["C:/Users/V/mySite/BackendDevelopment/ReactLearning/kepperAppPart3AllINOne/src/components/App.jsx"],"sourcesContent":["import React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n\nfunction App() {\n\n  const [notes,setNotes] = React.useState([]);\n\n  function noteAdd(newNote){ //all the inputs are come here now we need to store it somewhere like an array that changes the State so we need here useState()...\n    //console.log(note);\n\n    setNotes(prevValue => {\n      return [...prevValue,newNote]\n    });\n  }\n\n  function itemDelete(id){\n\n    setNotes((prevnotes,index) => {\n      return prevnotes.filter((items,index) => {\n        return index !== id;\n      });\n    });\n    //console.log(\"the delete press detected\");\n  }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea \n      add={noteAdd}\n      />\n      {notes.map((noteItems,index) => { //and in the map function we can pass the index so that it can check the index //every noteitems in notes like title and contents pass over that \n          return <Note \n          key={index}\n          id={index}\n          title={noteItems.title} \n          content={noteItems.content} \n          deleteById = {itemDelete} />\n      })}\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,UAAU,MAAM,cAAc;AAAC;AAEtC,SAASC,GAAG,GAAG;EAAA;EAAA;EAEb,sBAAyBL,KAAK,CAACM,QAAQ,CAAC,EAAE,CAAC;IAAA;IAApCC,KAAK;IAACC,QAAQ;EAErB,SAASC,OAAO,CAACC,OAAO,EAAC;IAAE;IACzB;;IAEAF,QAAQ,CAAC,UAAAG,SAAS,EAAI;MACpB,oCAAWA,SAAS,IAACD,OAAO;IAC9B,CAAC,CAAC;EACJ;EAEA,SAASE,UAAU,CAACC,EAAE,EAAC;IAErBL,QAAQ,CAAC,UAACM,SAAS,EAACC,KAAK,EAAK;MAC5B,OAAOD,SAAS,CAACE,MAAM,CAAC,UAACC,KAAK,EAACF,KAAK,EAAK;QACvC,OAAOA,KAAK,KAAKF,EAAE;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;IACF;EACF;;EAEA,oBACE;IAAA,wBACE,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eACV,QAAC,UAAU;MACX,GAAG,EAAEJ;IAAQ;MAAA;MAAA;MAAA;IAAA,QACX,EACDF,KAAK,CAACW,GAAG,CAAC,UAACC,SAAS,EAACJ,KAAK,EAAK;MAAE;MAC9B,oBAAO,QAAC,IAAI;QAEZ,EAAE,EAAEA,KAAM;QACV,KAAK,EAAEI,SAAS,CAACC,KAAM;QACvB,OAAO,EAAED,SAAS,CAACE,OAAQ;QAC3B,UAAU,EAAIT;MAAW,GAJpBG,KAAK;QAAA;QAAA;QAAA;MAAA,SAIkB;IAChC,CAAC,CAAC,eACF,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GAvCQV,GAAG;AAAA,KAAHA,GAAG;AAyCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}